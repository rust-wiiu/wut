[env]
BUILD_TYPE = { source = "${CARGO_MAKE_CARGO_PROFILE}", default_value = "debug", mapping = { "release" = "release" } }
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/powerpc-none-eabi/${BUILD_TYPE}"
RUSTFLAGS = { value = "", condition.env_not_set = ["RUSTFLAGS"] }

[tasks.build-elf]
private = true
env = { "RUSTFLAGS" = "-Clinker=${DEVKITPPC}/bin/powerpc-eabi-gcc -Clink-arg=-specs=${DEVKITPRO}/wut/share/wut.specs ${RUSTFLAGS}", OUT_FILE = "${TARGET_DIR}/${CARGO_MAKE_PROJECT_NAME}.elf" }
command = "rustup"
args = [
    "run",
    "nightly",
    "cargo",
    "build",
    "-Z",
    "build-std=core,alloc",
    "--no-default-features",
    "--target=${WUT_DIR}/powerpc-none-eabi.json",
    "--profile=${CARGO_MAKE_CARGO_PROFILE}",
]

[tasks.clean-elf]
private = true
# needed for later Rust scripts (e.g. wuhb)
env = { RUSTFLAGS = "" }
command = "${DEVKITPPC}/bin/powerpc-eabi-objcopy"
args = ["--remove-section", ".note.GNU-stack", "${OUT_FILE}"]

[tasks.elf]
dependencies = ["build-elf", "clean-elf"]

[tasks.rpx]
env = { ELF = "${OUT_FILE}", OUT_FILE = "${TARGET_DIR}/${CARGO_MAKE_PROJECT_NAME}.rpx" }
command = "${DEVKITPRO}/tools/bin/elf2rpl"
args = ["${ELF}", "${OUT_FILE}"]
dependencies = ["elf"]

[tasks.wuhb]
env = { RPX = "${OUT_FILE}", OUT_FILE = "${TARGET_DIR}/${CARGO_MAKE_PROJECT_NAME}.wuhb" }
script_runner = "@rust"
script = """
//! ```cargo
//! [dependencies]
//! cargo_metadata = "0.18.1"
//! ```

use cargo_metadata::MetadataCommand;
use std::{process::Command, env};

fn main() {
    let manifest = MetadataCommand::new().no_deps().exec().expect("Failed to parse cargo manifest");

    let dkp = env::var("DEVKITPRO").expect("Could not find env variable DEVKITPRO!");
    let mut cmd = Command::new(&format!("{dkp}/tools/bin/wuhbtool"));

    let mut args: Vec<String> = Vec::new();

    args.push(format!(
        "{}/{}.rpx",
        env::var("TARGET_DIR").unwrap(),
        env::var("CARGO_MAKE_PROJECT_NAME").unwrap()
    ));
    args.push(format!(
        "{}/{}.wuhb",
        env::var("TARGET_DIR").unwrap(),
        env::var("CARGO_MAKE_PROJECT_NAME").unwrap()
    ));

    if let Some(package) = manifest.root_package() {

        if package.authors.len() > 0 {
            args.push(format!("--author={}", package.authors.join(", ")));
        }

        if let Some(meta) = package.metadata.get("wuhb") {
            if let Some(name) = meta.get("name") {
                let name = name.to_string().replace(r#"\""#, "");
                args.push(format!("--name={name}"));
            }
            if let Some(short) = meta.get("short-name") {
                let short = short.to_string().replace(r#"\""#, "");
                args.push(format!("--short-name={short}"));
            }
            if let Some(icon) = meta.get("icon") {
                args.push(format!("--icon={icon}"));
            }
            if let Some(tv) = meta.get("tv-image") {
                args.push(format!("--tv-image={tv}"));
            }
            if let Some(drc) = meta.get("drc-image") {
                args.push(format!("--drc-image={drc}"));
            }
            if let Some(content) = meta.get("content") {
                args.push(format!("--content={content}"));
            }
        }
    }

    let res = cmd.args(&args).output().expect("Failed to execute process!");

    if !res.status.success() {
        panic!("Conversion from rpx to wuhb failed!");
    }
}
"""
dependencies = ["rpx"]
